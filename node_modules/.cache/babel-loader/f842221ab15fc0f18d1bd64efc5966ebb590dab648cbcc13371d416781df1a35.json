{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hp\\\\Desktop\\\\To do List\\\\weather-app\\\\src\\\\components\\\\CurrentLocation.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { UilTemperature, UilSun, UilSunset, UilWind, UilTear, UilLocationPoint } from \"@iconscout/react-unicons\";\nimport gif from './gif.webp'; // Adjust the path to your default GIF file\nimport rainyImage from './logo6.jpeg'; // Adjust the path to your rainy image\nimport cloudyImage from './logo7.jpeg'; // Adjust the path to your cloudy image\nimport clearImage from './logo4.jpeg'; // Adjust the path to your clear image\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CurrentLocation = () => {\n  _s();\n  const [location, setLocation] = useState(null);\n  const [weatherData, setWeatherData] = useState(null);\n  let backgroundPic = gif; // Default background pic\n  const apiKey = 'baafed74ddd9f05c52673a3bd435bb33'; // Your OpenWeatherMap API key\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setLocation({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude\n        });\n      }, error => {\n        console.error('Error getting current location:', error);\n        // Handle the error (e.g., show a message to the user)\n      });\n    } else {\n      console.error('Geolocation is not supported by this browser.');\n      // Handle the lack of geolocation support (e.g., show a message to the user)\n    }\n\n    // Cleanup function\n    return () => {\n      // Any cleanup code (if needed)\n    };\n  }, []);\n  useEffect(() => {\n    if (location) {\n      fetchWeatherByCoordinates(location.lat, location.lon);\n    }\n  }, [location]);\n  const fetchWeatherByCoordinates = (lat, lon) => {\n    fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`).then(response => response.json()).then(data => {\n      console.log('Weather data for current location:', data);\n      setWeatherData(data);\n      // Set background pic based on weather description\n      console.log(\"Start\");\n      if (data.weather && data.weather[0]) {\n        const description = data.weather[0].description.toLowerCase();\n        console.log(description);\n        if (description.includes('rain')) {\n          backgroundPic = `url(${rainyImage})`;\n          console.log(\"Done2\");\n        } else if (description.includes('overcast clouds')) {\n          backgroundPic = `url(${cloudyImage})`;\n          console.log(\"Done\");\n        } else if (description.includes('clear')) {\n          backgroundPic = `url(${clearImage})`;\n        }\n      }\n    }).catch(error => {\n      console.error('Error fetching weather data:', error);\n      // Handle the API request error (e.g., show a message to the user)\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundImage: `url(${backgroundPic})`,\n      backgroundSize: 'cover',\n      backgroundRepeat: 'no-repeat',\n      backgroundPosition: 'center',\n      width: '100%',\n      height: '100vh'\n    },\n    className: \"p-7 m-7\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(CurrentLocation, \"SAtiDrD6ltKZFNV294KpeHpkmXI=\");\n_c = CurrentLocation;\nexport default CurrentLocation;\nvar _c;\n$RefreshReg$(_c, \"CurrentLocation\");","map":{"version":3,"names":["React","useEffect","useState","UilTemperature","UilSun","UilSunset","UilWind","UilTear","UilLocationPoint","gif","rainyImage","cloudyImage","clearImage","jsxDEV","_jsxDEV","CurrentLocation","_s","location","setLocation","weatherData","setWeatherData","backgroundPic","apiKey","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","error","console","fetchWeatherByCoordinates","fetch","then","response","json","data","log","weather","description","toLowerCase","includes","catch","style","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition","width","height","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Hp/Desktop/To do List/weather-app/src/components/CurrentLocation.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n  UilTemperature,\r\n  UilSun,\r\n  UilSunset,\r\n  UilWind,\r\n  UilTear,\r\n  UilLocationPoint,\r\n} from \"@iconscout/react-unicons\";\r\nimport gif from './gif.webp'; // Adjust the path to your default GIF file\r\nimport rainyImage from './logo6.jpeg'; // Adjust the path to your rainy image\r\nimport cloudyImage from './logo7.jpeg'; // Adjust the path to your cloudy image\r\nimport clearImage from './logo4.jpeg'; // Adjust the path to your clear image\r\n\r\nconst CurrentLocation = () => {\r\n  const [location, setLocation] = useState(null);\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  let backgroundPic = gif; // Default background pic\r\n  const apiKey = 'baafed74ddd9f05c52673a3bd435bb33'; // Your OpenWeatherMap API key\r\n\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          setLocation({ lat: position.coords.latitude, lon: position.coords.longitude });\r\n        },\r\n        (error) => {\r\n          console.error('Error getting current location:', error);\r\n          // Handle the error (e.g., show a message to the user)\r\n        }\r\n      );\r\n    } else {\r\n      console.error('Geolocation is not supported by this browser.');\r\n      // Handle the lack of geolocation support (e.g., show a message to the user)\r\n    }\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      // Any cleanup code (if needed)\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (location) {\r\n      fetchWeatherByCoordinates(location.lat, location.lon);\r\n    }\r\n  }, [location]);\r\n\r\n  const fetchWeatherByCoordinates = (lat, lon) => {\r\n    fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log('Weather data for current location:', data);\r\n        setWeatherData(data);\r\n        // Set background pic based on weather description\r\n        console.log(\"Start\");\r\n        if (data.weather && data.weather[0]) {\r\n          const description = data.weather[0].description.toLowerCase();\r\n          console.log(description);\r\n          if (description.includes('rain')) {\r\n            backgroundPic = `url(${rainyImage})`;\r\n            console.log(\"Done2\");\r\n          } else if (description.includes('overcast clouds')) {\r\n            backgroundPic = `url(${cloudyImage})`;\r\n            console.log(\"Done\");\r\n          } else if (description.includes('clear')) {\r\n            backgroundPic = `url(${clearImage})`;\r\n          }\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching weather data:', error);\r\n        // Handle the API request error (e.g., show a message to the user)\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundImage: `url(${backgroundPic})`,\r\n        backgroundSize: 'cover',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundPosition: 'center',\r\n        width: '100%',\r\n        height: '100vh',\r\n      }}\r\n      className=\"p-7 m-7\"\r\n    >\r\n      {/* Rest of your component code */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrentLocation;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}